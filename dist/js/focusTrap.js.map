{
  "version": 3,
  "sources": ["../../src/js/focusTrap.js"],
  "sourcesContent": ["`use strict`;\n\nclass Draad_Focus_Trap {\n  /**\n   * Constructor\n   *\n   * @param {HTMLElement} node HTML element to trap focus in\n   */\n  constructor(node) {\n    this.rootEl = node;\n  }\n\n  rootEl = null;\n\n  _active = false;\n\n  firstFocusableElement = null;\n\n  lastFocusableElement = null;\n\n  get active() {\n    return this._active;\n  }\n\n  set active(value) {\n    if (typeof value !== \"boolean\") {\n      return;\n    }\n\n    this._active = value;\n\n    if (this._active) {\n      this.activate();\n    } else {\n      this.deactivate();\n    }\n  }\n\n  /**\n   * Activate focus trap\n   */\n  activate() {\n    if (!this._active) {\n      return;\n    }\n\n    // get all focusable children\n    const focusableElements = Array.from(\n      this.rootEl.querySelectorAll(\n        \"a[href], button, textarea, input, select, summary, [tabindex]\",\n      ),\n    );\n    // filter out elements with tabindex=\"-1\"\n    focusableElements.filter(\n      (element) => element.getAttribute(\"tabindex\") !== \"-1\",\n    );\n\n    if (focusableElements.length === 0) {\n      return;\n    }\n\n    // filter out elements that are not visible\n    const visibleFocusableElements = focusableElements.filter(\n      (element) => element.offsetParent !== null,\n    );\n\n    this.firstFocusableElement = visibleFocusableElements[0];\n\n    this.lastFocusableElement =\n      visibleFocusableElements[visibleFocusableElements.length - 1];\n\n    this.rootEl.addEventListener(\"keydown\", (event) => {\n      if (event.key !== \"Tab\") {\n        return;\n      }\n\n      if (\n        !event.shiftKey &&\n        document.activeElement === this.lastFocusableElement\n      ) {\n        event.preventDefault();\n        this.firstFocusableElement.focus();\n      } else if (\n        event.shiftKey &&\n        document.activeElement === this.firstFocusableElement\n      ) {\n        event.preventDefault();\n        this.lastFocusableElement.focus();\n      }\n    });\n  }\n\n  /**\n   * Deactivate focus trap\n   */\n  deactivate() {\n    this.rootEl.removeEventListener(\"keydown\", () => {});\n\n    this.firstFocusableElement = null;\n\n    this.lastFocusableElement = null;\n  }\n}\n\nexport default Draad_Focus_Trap;\n"],
  "mappings": "MAEA,IAAMA,EAAN,KAAuB,CAMrB,YAAYC,EAAM,CAChB,KAAK,OAASA,CAChB,CAEA,OAAS,KAET,QAAU,GAEV,sBAAwB,KAExB,qBAAuB,KAEvB,IAAI,QAAS,CACX,OAAO,KAAK,OACd,CAEA,IAAI,OAAOC,EAAO,CACZ,OAAOA,GAAU,YAIrB,KAAK,QAAUA,EAEX,KAAK,QACP,KAAK,SAAS,EAEd,KAAK,WAAW,EAEpB,CAKA,UAAW,CACT,GAAI,CAAC,KAAK,QACR,OAIF,IAAMC,EAAoB,MAAM,KAC9B,KAAK,OAAO,iBACV,+DACF,CACF,EAMA,GAJAA,EAAkB,OACfC,GAAYA,EAAQ,aAAa,UAAU,IAAM,IACpD,EAEID,EAAkB,SAAW,EAC/B,OAIF,IAAME,EAA2BF,EAAkB,OAChDC,GAAYA,EAAQ,eAAiB,IACxC,EAEA,KAAK,sBAAwBC,EAAyB,CAAC,EAEvD,KAAK,qBACHA,EAAyBA,EAAyB,OAAS,CAAC,EAE9D,KAAK,OAAO,iBAAiB,UAAYC,GAAU,CAC7CA,EAAM,MAAQ,QAKhB,CAACA,EAAM,UACP,SAAS,gBAAkB,KAAK,sBAEhCA,EAAM,eAAe,EACrB,KAAK,sBAAsB,MAAM,GAEjCA,EAAM,UACN,SAAS,gBAAkB,KAAK,wBAEhCA,EAAM,eAAe,EACrB,KAAK,qBAAqB,MAAM,GAEpC,CAAC,CACH,CAKA,YAAa,CACX,KAAK,OAAO,oBAAoB,UAAW,IAAM,CAAC,CAAC,EAEnD,KAAK,sBAAwB,KAE7B,KAAK,qBAAuB,IAC9B,CACF,EAEOC,EAAQP",
  "names": ["Draad_Focus_Trap", "node", "value", "focusableElements", "element", "visibleFocusableElements", "event", "focusTrap_default"]
}
